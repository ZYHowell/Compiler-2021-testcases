/*
Test Package: Codegen
Author: 18' Zonghan YANG
Time: 2021-3-25
Input:
=== input ===
=== end ===
Output:
=== output ===
=== end ===
ExitCode: 0
InstLimit: 9999
*/

int n, m, q;
void f() {n++; n = n * 1; n = n / 1; n = n ^ 0; n = n + 1 / 2;}
void g() {n++; f(); f(); f(); f(); f(); f(); f(); f(); f(); n++;}
void h() {n = n * 1; g(); g(); g(); g(); g(); g(); g(); n = n + 0;}
void k() {n = n / 1; m++; q++; h(); h(); h(); h(); h(); h(); h(); h(); n = n - 0; m++; q++;}

int work(int w) {
	n++; m++; q++;
	k();
	if (w > 0) return work(w - 1);
	else return 114514;
}


int w = 0;

int wpp () {
	w++;
	return ++w; // even
}

int wppp() {
	wpp(); 
	wpp(); 
	wpp(); 
	wpp(); 
	wpp(); 
	wpp(); 
	wpp(); 
	return wpp();
}

int wpppp() {
	wppp();
	wppp();
	wppp();
	wppp();
	wppp();
	wppp();
	return wppp();
}

int block() {  // may be infinite loop in bad inline
	return block();
}

int bblock() { // may be time-consuming
	wpppp();
	wpppp();
	bblock();
	return bblock();
}

int N = 1;
int wP() {
	int i, j, ii, isp;
	for (i = 3; i <= 8; i++) { // anti-constant propagation
		ii = i >> 1;
		isp = 1;
		for (j = 2; j < ii; j++) {
			if (i % j == 0) {
				isp = 0;
				i++;
				break;
			}
		}
		N = N + isp;
		i = i + isp;
	}
	// N = 4
	if ((N + wpppp()) % 2 == 0) return 0;
	block(); block();
	block(); block();
	return bblock();
}

void sanity_check() {
	wP();
}

int main() {
	n = 0;
	m = 0;
	q = 0;
	int ret = work(32);
	
	sanity_check();
	return ret + n + m + q - 4001;
}
